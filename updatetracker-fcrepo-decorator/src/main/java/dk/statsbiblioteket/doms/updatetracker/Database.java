package dk.statsbiblioteket.doms.updatetracker;


import org.fcrepo.server.errors.InitializationException;
import org.fcrepo.server.errors.ModuleInitializationException;
import org.fcrepo.server.storage.ConnectionPool;
import org.fcrepo.server.utilities.SQLUtility;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.IOException;
import java.io.InputStream;
import java.sql.Array;
import java.sql.Blob;
import java.sql.CallableStatement;
import java.sql.Clob;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.NClob;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLClientInfoException;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.SQLXML;
import java.sql.Savepoint;
import java.sql.Statement;
import java.sql.Struct;
import java.sql.Timestamp;
import java.util.Date;
import java.util.Map;
import java.util.Properties;
import java.util.concurrent.Executor;


/**
 * This is the database access object. Use it to add and remove log entries from the update tracker log database
 */
public class Database implements AutoCloseable {


    private static Logger logger = LoggerFactory.getLogger(Database.class);
    private final ConnectionPool cPool;

    public Database(ConnectionPool cPool) throws InitializationException {
        this.cPool = cPool;
        createUpdateTrackingLogTable(cPool);
    }


    /**
     * Create the update tracker log table
     *
     * @param cPool the connection pool
     *
     * @throws org.fcrepo.server.errors.ModuleInitializationException
     */
    private void createUpdateTrackingLogTable(ConnectionPool cPool) throws InitializationException {
    /*Create the table, as this is not created by Fedora default*/
        try {
            String dbSpec = "dk/statsbiblioteket/doms/updatetracker/updateTrackerLogTable.dbspec";
            InputStream specIn = this.getClass()
                                     .getClassLoader()
                                     .getResourceAsStream(dbSpec);
            if (specIn == null) {
                throw new IOException("Cannot find required " + "resource: " +
                                      dbSpec);
            }
            SQLUtility.createNonExistingTables(cPool, specIn);
        } catch (Exception e) {
            throw new InitializationException("Error while attempting to " +
                                              "check for and create non-existing table(s): " +
                                              e.getClass()
                                               .getName() + ": " + e.getMessage(), e);
        }
    }

    /**
     * Add a log entry to the database
     * @param pid the pid of the object on which the method was invoked
     * @param timestamp the timestamp of the invocation
     * @param name the name of the method
     * @param param the first parameter (after pid) of the method, or null. This will most often be datastream id or state
     * @return the autogenerated key of the log entry in the database
     * @throws IOException
     */
    public Long addLogEntry(String pid, Date timestamp, String name, String param) throws IOException {


        try (Connection conn = getReadWriteConnection(cPool);
             PreparedStatement statement = conn.prepareStatement("INSERT INTO Logs(pid,happened,method,param) VALUES (?,?,?,?)", Statement.RETURN_GENERATED_KEYS);) {
            statement.setString(1,pid);
            statement.setTimestamp(2, new Timestamp(timestamp.getTime()));
            statement.setString(3, name);
            statement.setString(4,param);
            statement.executeUpdate();
            ResultSet generatedKeys = statement.getGeneratedKeys();

            long key = -1;
            if (generatedKeys.first()){
                key = generatedKeys.getLong("key");
            }
            return key;


        } catch (SQLException e) {
            throw new IOException("Failed to add log entry with with pid='"+pid+"', happened='"+timestamp.getTime()+"', method='"+name+"', param='"+param+"' to update tracker database", e);
        }
    }
    public void removeLogEntry(Long key) throws IOException {
        if (key == null || key <= 0) {
            return;
        }

        try (Connection conn = getReadWriteConnection(cPool);
             PreparedStatement statement = conn.prepareStatement("DELETE FROM Logs WHERE key = ?");) {
            statement.setLong(1, key);
            statement.executeUpdate();
        } catch (SQLException e) {
            throw new IOException("Failed to remove log entry with key '"+key+"' from update tracker database",e);
        }
    }

    @Override
    public void close() {
        if (cPool != null) {
            cPool.close();
        }
    }


    /**
     * Utility method for getting a database connection from the connection pool, that is freed when closed automatically
     * @param cPool
     * @return a new database connection
     * @throws SQLException
     */
    private Connection getReadWriteConnection(final ConnectionPool cPool) throws SQLException {
        final Connection conn = cPool.getReadWriteConnection();
        return new Connection() {
            public Statement createStatement() throws SQLException {
                return conn.createStatement();
            }

            public PreparedStatement prepareStatement(String sql) throws SQLException {
                return conn.prepareStatement(sql);
            }

            public CallableStatement prepareCall(String sql) throws SQLException {
                return conn.prepareCall(sql);
            }

            public String nativeSQL(String sql) throws SQLException {
                return conn.nativeSQL(sql);
            }

            public void setAutoCommit(boolean autoCommit) throws SQLException {
                conn.setAutoCommit(autoCommit);
            }

            public boolean getAutoCommit() throws SQLException {
                return conn.getAutoCommit();
            }

            public void commit() throws SQLException {
                conn.commit();
            }

            public void rollback() throws SQLException {
                conn.rollback();
            }

            public void close() throws SQLException {
                try {
                    conn.close();
                } finally {
                    cPool.free(conn);
                }
            }

            public boolean isClosed() throws SQLException {
                return conn.isClosed();
            }

            public DatabaseMetaData getMetaData() throws SQLException {
                return conn.getMetaData();
            }

            public void setReadOnly(boolean readOnly) throws SQLException {
                conn.setReadOnly(readOnly);
            }

            public boolean isReadOnly() throws SQLException {
                return conn.isReadOnly();
            }

            public void setCatalog(String catalog) throws SQLException {
                conn.setCatalog(catalog);
            }

            public String getCatalog() throws SQLException {
                return conn.getCatalog();
            }

            public void setTransactionIsolation(int level) throws SQLException {
                conn.setTransactionIsolation(level);
            }

            public int getTransactionIsolation() throws SQLException {
                return conn.getTransactionIsolation();
            }

            public SQLWarning getWarnings() throws SQLException {
                return conn.getWarnings();
            }

            public void clearWarnings() throws SQLException {
                conn.clearWarnings();
            }

            public Statement createStatement(int resultSetType, int resultSetConcurrency) throws SQLException {
                return conn.createStatement(resultSetType, resultSetConcurrency);
            }

            public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency) throws
                                                                                                               SQLException {
                return conn.prepareStatement(sql, resultSetType, resultSetConcurrency);
            }

            public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency) throws
                                                                                                          SQLException {
                return conn.prepareCall(sql, resultSetType, resultSetConcurrency);
            }

            public Map<String, Class<?>> getTypeMap() throws SQLException {
                return conn.getTypeMap();
            }

            public void setTypeMap(Map<String, Class<?>> map) throws SQLException {
                conn.setTypeMap(map);
            }

            public void setHoldability(int holdability) throws SQLException {
                conn.setHoldability(holdability);
            }

            public int getHoldability() throws SQLException {
                return conn.getHoldability();
            }

            public Savepoint setSavepoint() throws SQLException {
                return conn.setSavepoint();
            }

            public Savepoint setSavepoint(String name) throws SQLException {
                return conn.setSavepoint(name);
            }

            public void rollback(Savepoint savepoint) throws SQLException {
                conn.rollback(savepoint);
            }

            public void releaseSavepoint(Savepoint savepoint) throws SQLException {
                conn.releaseSavepoint(savepoint);
            }

            public Statement createStatement(int resultSetType, int resultSetConcurrency,
                                             int resultSetHoldability) throws SQLException {
                return conn.createStatement(resultSetType, resultSetConcurrency, resultSetHoldability);
            }

            public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency,
                                                      int resultSetHoldability) throws SQLException {
                return conn.prepareStatement(sql, resultSetType, resultSetConcurrency, resultSetHoldability);
            }

            public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency,
                                                 int resultSetHoldability) throws SQLException {
                return conn.prepareCall(sql, resultSetType, resultSetConcurrency, resultSetHoldability);
            }

            public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) throws SQLException {
                return conn.prepareStatement(sql, autoGeneratedKeys);
            }

            public PreparedStatement prepareStatement(String sql, int[] columnIndexes) throws SQLException {
                return conn.prepareStatement(sql, columnIndexes);
            }

            public PreparedStatement prepareStatement(String sql, String[] columnNames) throws SQLException {
                return conn.prepareStatement(sql, columnNames);
            }

            public Clob createClob() throws SQLException {
                return conn.createClob();
            }

            public Blob createBlob() throws SQLException {
                return conn.createBlob();
            }

            public NClob createNClob() throws SQLException {
                return conn.createNClob();
            }

            public SQLXML createSQLXML() throws SQLException {
                return conn.createSQLXML();
            }

            public boolean isValid(int timeout) throws SQLException {
                return conn.isValid(timeout);
            }

            public void setClientInfo(String name, String value) throws SQLClientInfoException {
                conn.setClientInfo(name, value);
            }

            public void setClientInfo(Properties properties) throws SQLClientInfoException {
                conn.setClientInfo(properties);
            }

            public String getClientInfo(String name) throws SQLException {
                return conn.getClientInfo(name);
            }

            public Properties getClientInfo() throws SQLException {
                return conn.getClientInfo();
            }

            public Array createArrayOf(String typeName, Object[] elements) throws SQLException {
                return conn.createArrayOf(typeName, elements);
            }

            public Struct createStruct(String typeName, Object[] attributes) throws SQLException {
                return conn.createStruct(typeName, attributes);
            }

            public void setSchema(String schema) throws SQLException {
                conn.setSchema(schema);
            }

            public String getSchema() throws SQLException {
                return conn.getSchema();
            }

            public void abort(Executor executor) throws SQLException {
                conn.abort(executor);
            }

            public void setNetworkTimeout(Executor executor, int milliseconds) throws SQLException {
                conn.setNetworkTimeout(executor, milliseconds);
            }

            public int getNetworkTimeout() throws SQLException {
                return conn.getNetworkTimeout();
            }

            public <T> T unwrap(Class<T> iface) throws SQLException {
                return conn.unwrap(iface);
            }

            public boolean isWrapperFor(Class<?> iface) throws SQLException {
                return conn.isWrapperFor(iface);
            }
        };
    }
}
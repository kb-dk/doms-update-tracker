# MPT-store contains a table for each relationship. The tables are name t1, t2, t3 etc.
# A table "tmap" contains the table number for each relation.

# Get the table name for common relations used in methods.
lastmodifiedtable=t$(psql "$DOMSTRIPLESTOREDBNAME" -c "\copy (SELECT pkey FROM tmap WHERE p='<info:fedora/fedora-system:def/view#lastModifiedDate>')                       TO STDOUT")
statetable=t$(       psql "$DOMSTRIPLESTOREDBNAME" -c "\copy (SELECT pkey FROM tmap WHERE p='<info:fedora/fedora-system:def/model#state>')                                 TO STDOUT")
modeltable=t$(       psql "$DOMSTRIPLESTOREDBNAME" -c "\copy (SELECT pkey FROM tmap WHERE p='<info:fedora/fedora-system:def/model#hasModel>')                              TO STDOUT")
collectiontable=t$(  psql "$DOMSTRIPLESTOREDBNAME" -c "\copy (SELECT pkey FROM tmap WHERE p='<http://doms.statsbiblioteket.dk/relations/default/0/1/#isPartOfCollection>') TO STDOUT")

# Given a content model, a collection and a view,
# insert all objects of that content model into records for the given collection and view
function addRecordsForContentModel {
    local cm=$1
    local collection=$2
    local view=$3
    echo $(date) "Get all objects of $cm + their last modified date & status"

    psql "$DOMSTRIPLESTOREDBNAME" -c "\copy (
        select
            '$view',
            substring(trim('<>' from $lastmodifiedtable.s), 13),
            '$collection',
            null,
            CASE when $statetable.o='<info:fedora/fedora-system:def/model#Active>' then split_part($lastmodifiedtable.o, '\"', 2) else null end,
            split_part($lastmodifiedtable.o, '\"', 2),
            split_part($lastmodifiedtable.o, '\"', 2)
        from
            $lastmodifiedtable, $statetable, $modeltable
        where
            $lastmodifiedtable.s=$statetable.s
            and $lastmodifiedtable.s=$modeltable.s
            and $modeltable.o='<info:fedora/$cm>'
    ) TO STDOUT" > $cm.records

    echo $(date) "Add to records with $view view, the found entrypids, $collection collection, no deleted timestamp, possibly active timestamp if record is active, inactive timestamp and lastmodified"

    psql "$DOMSUPDATETRACKERDBNAME" -c "\copy records (viewangle, entrypid, collection, deleted, active, inactive, lastmodified) FROM STDIN" < $cm.records
}

# Given a content model and a view,
# insert all objects of that content model into records for the given view and the collections those objects are members of
function addRecordsForContentModelUnknownCollection {
    local cm=$1
    local view=$2
    echo $(date) "Get all objects of $cm + their last modified date & status"

    psql "$DOMSTRIPLESTOREDBNAME" -c "\copy (
        select
            '$view',
            substring(trim('<>' from $lastmodifiedtable.s), 13),
            substring(trim('<>' from $collectiontable.o), 13),
            null,
            CASE when $statetable.o='<info:fedora/fedora-system:def/model#Active>' then split_part($lastmodifiedtable.o, '\"', 2) else null end,
            split_part($lastmodifiedtable.o, '\"', 2),
            split_part($lastmodifiedtable.o, '\"', 2)
        from
            $lastmodifiedtable, $statetable, $modeltable, $collectiontable
        where
            $lastmodifiedtable.s=$statetable.s
            and $lastmodifiedtable.s=$modeltable.s
            and $lastmodifiedtable.s=$collectiontable.s
            and $modeltable.o='<info:fedora/$cm>'
    ) TO STDOUT" > $cm.records

    echo $(date) "Add to records with $view view, the found entrypids, the found collection, no deleted timestamp, possibly active timestamp if record is active, inactive timestamp and lastmodified"

    psql "$DOMSUPDATETRACKERDBNAME" -c "\copy records (viewangle, entrypid, collection, deleted, active, inactive, lastmodified) FROM STDIN" < $cm.records
}

# List all objects in records and add them to memberships.
function addMembershipsForAllRecords {
    echo $(date) "Add all records to have memberships of themselves"

    psql "$DOMSUPDATETRACKERDBNAME" -c "insert into memberships (viewangle, entrypid, collection, objectpid)
        select viewangle, entrypid, collection, entrypid
        from records"
}

# Given a relationname, a collection and a view,
# insert all objects with that relation into memberships, for the given source object, collection and view
function addMembershipsForRelations {
    local relation=$1
    local collection=$2
    local view=$3

    echo $(date) "Get all $relation relations"

    relationtable2=t$(psql "$DOMSTRIPLESTOREDBNAME" -c "\copy (SELECT pkey FROM tmap WHERE p='<$relation>') TO STDOUT")

    psql "$DOMSTRIPLESTOREDBNAME" -c "\copy (
        select
            '$view',
            substring(trim('<>' from $relationtable2.s), 13),
            '$collection',
            substring(trim('<>' from $relationtable2.o), 13)
        from
            $relationtable2
    ) TO STDOUT" > relation-"${relation//\//_}"

    echo $(date) "Add to memberships for collection $collection and view $view"

    psql "$DOMSUPDATETRACKERDBNAME" -c "\copy memberships (viewangle, entrypid, collection, objectpid) FROM STDIN" < relation-"${relation//\//_}"
}

# Given a relationname, a collection, a view and a content model,
# insert all objects with that relation into memberships, for the given source object, collection and view
# but only if the source objects are of a specific content model
function addMembershipsForRelationsAndContentModel {
    local relation=$1
    local collection=$2
    local view=$3
    local contentmodel=$4

    echo $(date) "Get all $relation relations"

    relationtable2=t$(psql "$DOMSTRIPLESTOREDBNAME" -c "\copy (SELECT pkey FROM tmap WHERE p='<$relation>') TO STDOUT")

    psql "$DOMSTRIPLESTOREDBNAME" -c "\copy (
        select
            '$view',
            substring(trim('<>' from $relationtable2.s), 13),
            '$collection',
            substring(trim('<>' from $relationtable2.o), 13)
        from
            $relationtable2, $modeltable
        where
            $modeltable.s=$relationtable2.s
            and $modeltable.o='<info:fedora/$contentmodel>'
    ) TO STDOUT" > relation-"${relation//\//_}"

    echo $(date) "Add to memberships for collection $collection and view $view"

    psql "$DOMSUPDATETRACKERDBNAME" -c "\copy memberships (viewangle, entrypid, collection, objectpid) FROM STDIN" < relation-"${relation//\//_}"
}

# Given two relationnames, a collection and a view
# insert all objects connected by the two relations into memberships, for the given source object, collection and view
function addMembershipsForCombinedRelations {
    local relation1=$1
    local relation2=$2
    local collection=$3
    local view=$4

    echo $(date) "Get all $relation1 -> $relation2 relations"

    relationtable1=t$(psql "$DOMSTRIPLESTOREDBNAME" -c "\copy (SELECT pkey FROM tmap WHERE p='<$relation1>') TO STDOUT")
    relationtable2=t$(psql "$DOMSTRIPLESTOREDBNAME" -c "\copy (SELECT pkey FROM tmap WHERE p='<$relation2>') TO STDOUT")

    psql "$DOMSTRIPLESTOREDBNAME" -c "\copy (
        select
            '$view',
            substring(trim('<>' from $relationtable1.s), 13),
            '$collection',
            substring(trim('<>' from $relationtable2.o), 13)
        from
            $relationtable1,$relationtable2
        where
            $relationtable1.o=$relationtable2.s
    ) TO STDOUT" > relation-"${relation1//\//_}"-"${relation2//\//_}"

    echo $(date) "Add to memberships for collection $collection and view $view"

    psql "$DOMSUPDATETRACKERDBNAME" -c "\copy memberships (viewangle, entrypid, collection, objectpid) FROM STDIN" < relation-"${relation1//\//_}"-"${relation2//\//_}"
}

# Given a relationname, a collection and a view,
# insert all objects with that relation into memberships, for the given target object, collection and view
function addMembershipsForInverseRelations {
    local relation=$1
    local collection=$2
    local view=$3

    echo $(date) "Get all $relation relations"

    relationtable2=t$(psql "$DOMSTRIPLESTOREDBNAME" -c "\copy (SELECT pkey FROM tmap WHERE p='<$relation>') TO STDOUT")

    psql "$DOMSTRIPLESTOREDBNAME" -c "\copy (
        select
            '$view',
            substring(trim('<>' from $relationtable2.o), 13),
            '$collection',
            substring(trim('<>' from $relationtable2.s), 13)
        from
            $relationtable2
    ) TO STDOUT" > inverserelation-"${relation//\//_}"

    echo $(date) "Add to memberships for collection $collection and view $view"

    psql "$DOMSUPDATETRACKERDBNAME" -c "\copy memberships (viewangle, entrypid, collection, objectpid) FROM STDIN" < inverserelation-"${relation//\//_}"
}

# Given a relationname, a collection, a view and a content model,
# insert all objects with that relation into memberships, for the given target object, collection and view,
# but only if the object of the relation are of a specific content model
function addMembershipsForInverseRelationsAndContentModel {
    local relation=$1
    local collection=$2
    local view=$3
    local contentmodel=$4

    echo $(date) "Get all $relation relations to contentmodel $contentmodel"

    relationtable2=t$(psql "$DOMSTRIPLESTOREDBNAME" -c "\copy (SELECT pkey FROM tmap WHERE p='<$relation>') TO STDOUT")

    psql "$DOMSTRIPLESTOREDBNAME" -c "\copy (
        select
            '$view',
            substring(trim('<>' from $relationtable2.o), 13),
            '$collection',
            substring(trim('<>' from $relationtable2.s), 13)
        from
            $relationtable2, $modeltable
        where
            $modeltable.s=$relationtable2.o
            and $modeltable.o='<info:fedora/$contentmodel>'
    ) TO STDOUT" > inverserelation-"${relation//\//_}"

    echo $(date) "Add the batches to memberships"

    psql "$DOMSUPDATETRACKERDBNAME" -c "\copy memberships (viewangle, entrypid, collection, objectpid) FROM STDIN" < inverserelation-"${relation//\//_}"
}

# Given a relation of objects referring to each other in a linked list, a collection and a view,
# calculate all objects that are connected by that relation, and add those to memberships for all connected objects.
function addLinkedListRelations {
    local linkedlistrelation=$1
    local view=$2
    local collection=$3

    echo $(date) "Get linked list relation $linkedlistrelation"

    linkedlistrelationtable=t$(psql "$DOMSTRIPLESTOREDBNAME" -c "\copy (SELECT pkey FROM tmap WHERE p='<$linkedlistrelation>') TO STDOUT")

    psql "$DOMSTRIPLESTOREDBNAME" -c "\copy (
        select
            substring(trim('<>' from s), 13), substring(trim('<>' from o), 13)
        from
            $linkedlistrelationtable
    ) TO STDOUT" > linkedlist-"${linkedlistrelation//\//_}"

    echo $(date) "Calculate memberships"

    ./linkedlisttomemberships.py linkedlist-"${linkedlistrelation//\//_}" linkedlist-"${linkedlistrelation//\//_}" "$view" "$collection" > results-"${linkedlistrelation//\//_}"

    echo $(date) "Insert into memberships"

    psql "$DOMSUPDATETRACKERDBNAME" -c "\copy memberships (viewangle, entrypid, collection, objectpid) FROM STDIN" < results-"${linkedlistrelation//\//_}"
}

# Given a relation of objects referring to each other in a linked list, an inverse relation and a relation pointing to objects in this linked list plus a collection and a view,
# calculate all objects that are connected by the linked list relation,
# and add those to memberships for all objects connected to it by the inverse and normal relations.
function addLinkedListRelationsFromInverseForwardCombinedRelations {
    local linkedlistrelation=$1
    local inverserelation=$2
    local relation=$3
    local view=$4
    local collection=$5

    echo $(date) "Get linked list relation $linkedlistrelation"

    linkedlistrelationtable=t$(psql "$DOMSTRIPLESTOREDBNAME" -c "\copy (SELECT pkey FROM tmap WHERE p='<$linkedlistrelation>') TO STDOUT")

    psql "$DOMSTRIPLESTOREDBNAME" -c "\copy (
        select
            substring(trim('<>' from s), 13), substring(trim('<>' from o), 13)
        from
            $linkedlistrelationtable
    ) TO STDOUT" > linkedlist-"${linkedlistrelation//\//_}"

    echo $(date) "Get relations $relation to linkedlist relation $inverserelation"

    relationtable1=t$(psql "$DOMSTRIPLESTOREDBNAME" -c "\copy (SELECT pkey FROM tmap WHERE p='<$inverserelation>') TO STDOUT")
    relationtable2=t$(psql "$DOMSTRIPLESTOREDBNAME" -c "\copy (SELECT pkey FROM tmap WHERE p='<$relation>') TO STDOUT")

    psql "$DOMSTRIPLESTOREDBNAME" -c "\copy (
        select
            substring(trim('<>' from $relationtable1.o), 13), substring(trim('<>' from $relationtable2.o), 13)
        from
            $relationtable2, $relationtable1
        where
            $relationtable2.s=$relationtable1.s
    ) TO STDOUT" > linkedlist-"${relation//\//_}"

    echo $(date) "Calculate memberships"

    ./linkedlisttomemberships.py linkedlist-"${linkedlistrelation//\//_}" linkedlist-"${relation//\//_}" "$view" "$collection"> results-"${relation//\//_}"

    echo $(date) "Insert into memberships"

    psql "$DOMSUPDATETRACKERDBNAME" -c "\copy memberships (viewangle, entrypid, collection, objectpid) FROM STDIN" < results-"${relation//\//_}"
}
